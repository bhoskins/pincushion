{"version":3,"sources":["vendor/ember-cli/app-prefix.js","pincushion/adapters/bookmark.js","pincushion/app.js","pincushion/controllers/bookmark.js","pincushion/controllers/edit.js","pincushion/controllers/index.js","pincushion/initializers/app-version.js","pincushion/initializers/export-application-global.js","pincushion/initializers/parse-tokens.js","pincushion/initializers/simple-auth.js","pincushion/initializers/store-service.js","pincushion/lib/identity-map.js","pincushion/router.js","pincushion/routes/application.js","pincushion/routes/edit.js","pincushion/routes/index.js","pincushion/routes/new.js","pincushion/routes/show.js","pincushion/routes/tags/show.js","pincushion/services/store.js","pincushion/templates/application.js","pincushion/templates/edit.js","pincushion/templates/index.js","pincushion/templates/new.js","pincushion/templates/show.js","pincushion/tests/adapters/bookmark.jshint.js","pincushion/tests/app.jshint.js","pincushion/tests/controllers/bookmark.jshint.js","pincushion/tests/controllers/edit.jshint.js","pincushion/tests/controllers/index.jshint.js","pincushion/tests/helpers/resolver.js","pincushion/tests/helpers/resolver.jshint.js","pincushion/tests/helpers/start-app.js","pincushion/tests/helpers/start-app.jshint.js","pincushion/tests/initializers/parse-tokens.jshint.js","pincushion/tests/initializers/store-service.jshint.js","pincushion/tests/lib/identity-map.jshint.js","pincushion/tests/router.jshint.js","pincushion/tests/routes/application.jshint.js","pincushion/tests/routes/edit.jshint.js","pincushion/tests/routes/index.jshint.js","pincushion/tests/routes/new.jshint.js","pincushion/tests/routes/show.jshint.js","pincushion/tests/routes/tags/show.jshint.js","pincushion/tests/services/store.jshint.js","pincushion/tests/test-helper.js","pincushion/tests/test-helper.jshint.js","pincushion/tests/unit/adapters/bookmark-test.js","pincushion/tests/unit/adapters/bookmark-test.jshint.js","pincushion/tests/unit/controllers/bookmark-test.js","pincushion/tests/unit/controllers/bookmark-test.jshint.js","pincushion/tests/unit/controllers/edit-test.js","pincushion/tests/unit/controllers/edit-test.jshint.js","pincushion/tests/unit/controllers/index-test.js","pincushion/tests/unit/controllers/index-test.jshint.js","pincushion/tests/unit/initializers/parse-tokens-test.js","pincushion/tests/unit/initializers/parse-tokens-test.jshint.js","pincushion/tests/unit/models/identity-map-test.js","pincushion/tests/unit/models/identity-map-test.jshint.js","pincushion/tests/unit/routes/application-test.js","pincushion/tests/unit/routes/application-test.jshint.js","pincushion/tests/unit/routes/edit-test.js","pincushion/tests/unit/routes/edit-test.jshint.js","pincushion/tests/unit/routes/index-test.js","pincushion/tests/unit/routes/index-test.jshint.js","pincushion/tests/unit/routes/new-test.js","pincushion/tests/unit/routes/new-test.jshint.js","pincushion/tests/unit/routes/show-test.js","pincushion/tests/unit/routes/show-test.jshint.js","pincushion/tests/unit/routes/tags/show-test.js","pincushion/tests/unit/routes/tags/show-test.jshint.js","pincushion/tests/unit/services/store-test.js","pincushion/tests/unit/services/store-test.jshint.js","vendor/ember-cli/app-suffix.js","vendor/ember-cli/app-boot.js"],"sourcesContent":["/* jshint ignore:start */\n\n/* jshint ignore:end */\n","define('pincushion/adapters/bookmark', ['exports', 'ic-ajax', 'ember'], function (exports, ajax, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n    find: function find(name, id) {\n      /* jshint unused: false */\n      return ajax['default'](\"https://api.parse.com/1/classes/Bookmark/\" + id).then(function (bookmark) {\n        bookmark.id = bookmark.objectId;\n        delete bookmark.objectId;\n        return bookmark;\n      });\n    },\n\n    findAll: function findAll(name) {\n      /* jshint unused: false */\n      return ajax['default'](\"https://api.parse.com/1/classes/Bookmark\").then(function (response) {\n        return response.results.map(function (bookmark) {\n          bookmark.id = bookmark.objectId;\n          delete bookmark.objectId;\n          return bookmark;\n        });\n      });\n    },\n\n    findQuery: function findQuery(name, query) {\n      /* jshint unused: false */\n      return ajax['default'](\"https://api.parse.com/1/classes/Bookmark\", {\n        data: Ember['default'].$.param({\n          where: JSON.stringify(query)\n        })\n      }).then(function (response) {\n        return response.results.map(function (bookmark) {\n          bookmark.id = bookmark.objectId;\n          delete bookmark.objectId;\n          return bookmark;\n        });\n      });\n    },\n\n    destroy: function destroy(name, record) {\n      /* jshint unused: false */\n      return ajax['default']({\n        url: \"https://api.parse.com/1/classes/Bookmark/\" + record.id,\n        type: \"DELETE\"\n      });\n    },\n\n    save: function save(name, record) {\n      /* jshint unused: false */\n      if (record.id) {\n        return ajax['default']({\n          url: \"https://api.parse.com/1/classes/Bookmark/\" + record.id,\n          type: \"PUT\",\n          data: JSON.stringify(record)\n        }).then(function (response) {\n          response.id = response.objectId;\n          delete response.objectId;\n          return response;\n        });\n      } else {\n        return ajax['default']({\n          url: \"https://api.parse.com/1/classes/Bookmark\",\n          type: \"POST\",\n          data: JSON.stringify(record)\n        }).then(function (response) {\n          record.updatedAt = response.updatedAt;\n          return record;\n        });\n      }\n    }\n  });\n\n});","define('pincushion/app', ['exports', 'ember', 'ember/resolver', 'ember/load-initializers', 'pincushion/config/environment'], function (exports, Ember, Resolver, loadInitializers, config) {\n\n  'use strict';\n\n  Ember['default'].MODEL_FACTORY_INJECTIONS = true;\n\n  var App = Ember['default'].Application.extend({\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix,\n    Resolver: Resolver['default']\n  });\n\n  loadInitializers['default'](App, config['default'].modulePrefix);\n\n  exports['default'] = App;\n\n});","define('pincushion/controllers/bookmark', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    actions: {\n      destroy: function destroy() {\n        this.store.destroy(\"bookmark\", this.get(\"model\"));\n      }\n    }\n  });\n\n});","define('pincushion/controllers/edit', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    actions: {\n      saveBookmark: function saveBookmark() {\n        this.store.save(\"bookmark\", this.get(\"model\"));\n        this.transitionToRoute(\"show\", this.get(\"model\"));\n      }\n    }\n  });\n\n});","define('pincushion/controllers/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Controller.extend({\n    bookmarksCount: (function () {\n      return this.get(\"model.length\");\n    }).property(\"model.@each\")\n  });\n\n});","define('pincushion/initializers/app-version', ['exports', 'pincushion/config/environment', 'ember'], function (exports, config, Ember) {\n\n  'use strict';\n\n  var classify = Ember['default'].String.classify;\n\n  exports['default'] = {\n    name: \"App Version\",\n    initialize: function initialize(container, application) {\n      var appName = classify(application.toString());\n      Ember['default'].libraries.register(appName, config['default'].APP.version);\n    }\n  };\n\n});","define('pincushion/initializers/export-application-global', ['exports', 'ember', 'pincushion/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    var classifiedName = Ember['default'].String.classify(config['default'].modulePrefix);\n\n    if (config['default'].exportApplicationGlobal && !window[classifiedName]) {\n      window[classifiedName] = application;\n    }\n  }\n\n  ;\n\n  exports['default'] = {\n    name: \"export-application-global\",\n\n    initialize: initialize\n  };\n\n});","define('pincushion/initializers/parse-tokens', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize() {\n    Ember['default'].$.ajaxSetup({\n      headers: {\n        \"X-Parse-Application-Id\": \"I9jp3a1SVCHn34o0rO9Synf9WhtbLKe8UO1nTMWk\",\n        \"X-Parse-REST-API-Key\": \"0jPQno1FXHWw0NJ44T9SQWRwPyepNlH4QNois5Nq\"\n      }\n    });\n  }\n\n  exports['default'] = {\n    name: \"parse-tokens\",\n    initialize: initialize\n  };\n  /* container, application */\n\n});","define('pincushion/initializers/simple-auth', ['exports', 'simple-auth/configuration', 'simple-auth/setup', 'pincushion/config/environment'], function (exports, Configuration, setup, ENV) {\n\n  'use strict';\n\n  exports['default'] = {\n    name: \"simple-auth\",\n    initialize: function initialize(container, application) {\n      Configuration['default'].load(container, ENV['default'][\"simple-auth\"] || {});\n      setup['default'](container, application);\n    }\n  };\n\n});","define('pincushion/initializers/store-service', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports.initialize = initialize;\n\n  function initialize(container, application) {\n    application.inject(\"route\", \"store\", \"service:store\");\n    application.inject(\"controller\", \"store\", \"service:store\");\n  }\n\n  exports['default'] = {\n    name: \"store-service\",\n    initialize: initialize\n  };\n\n});","define('pincushion/lib/identity-map', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Object.extend({\n    init: function init() {\n      this._map = Ember['default'].Object.create();\n    },\n\n    get: function get(type, id) {\n      var typeArray = this._getType(type);\n      if (id) {\n        /* SINGLE RECORD */\n        return typeArray.findBy(\"__jsim_meta_id\", id);\n      } else {\n        /* ALL RECORDS */\n        return typeArray;\n      }\n    },\n\n    set: function set(type, id, record) {\n      var typeArray = this._getType(type);\n      var cached = typeArray.findBy(\"__jsim_meta_id\", id);\n      if (cached) {\n        cached.setProperties(record);\n      } else {\n        var v = record instanceof Ember['default'].Object ? record : Ember['default'].Object.create(record);\n        v.__jsim_meta_id = id;\n        typeArray.addObject(v);\n      }\n    },\n\n    remove: function remove(type, record) {\n      var typeArray = this._getType(type);\n      if (typeof record !== \"object\") {\n        // assume it's an id\n        record = typeArray.findBy(\"__jsim_meta_id\", record);\n      }\n      typeArray.removeObject(record);\n    },\n\n    clear: function clear(type) {\n      var typeArray = this._getType(type);\n      typeArray.splice(0, typeArray.length);\n    },\n\n    _getType: function _getType(type) {\n      var typeArray = this._map.get(type);\n      if (!typeArray) {\n        this._map.set(type, Ember['default'].A());\n        typeArray = this._map.get(type);\n      }\n      return typeArray;\n    }\n  });\n\n});","define('pincushion/router', ['exports', 'ember', 'pincushion/config/environment'], function (exports, Ember, config) {\n\n  'use strict';\n\n  var Router = Ember['default'].Router.extend({\n    location: config['default'].locationType\n  });\n\n  Router.map(function () {\n    this.route(\"show\", { path: \"/show/:bookmark_id\" });\n    this.route(\"new\");\n    this.route(\"edit\", { path: \"/edit/:bookmark_id\" });\n\n    this.route(\"tags\", function () {\n      this.route(\"show\", { path: \"/:tag\" });\n    });\n  });\n\n  exports['default'] = Router;\n\n});","define('pincushion/routes/application', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    actions: {\n      showNewBookmark: function showNewBookmark() {\n        this.transitionTo(\"new\");\n      }\n    }\n  });\n\n});","define('pincushion/routes/edit', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('pincushion/routes/index', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return this.store.findAll(\"bookmark\");\n    } });\n\n});","define('pincushion/routes/new', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model() {\n      return {};\n    },\n\n    actions: {\n      createBookmark: function createBookmark() {\n        var self = this;\n        this.store.save(\"bookmark\", this.modelFor(\"new\")).then(function () {\n          self.transitionTo(\"index\");\n        });\n      }\n    }\n  });\n\n});","define('pincushion/routes/show', ['exports', 'ember'], function (exports, Ember) {\n\n\t'use strict';\n\n\texports['default'] = Ember['default'].Route.extend({});\n\n});","define('pincushion/routes/tags/show', ['exports', 'ember'], function (exports, Ember) {\n\n  'use strict';\n\n  exports['default'] = Ember['default'].Route.extend({\n    model: function model(params) {\n      return this.store.findQuery(\"bookmark\", {\n        tags: params.tag\n      });\n    },\n\n    renderTemplate: function renderTemplate(controller, model) {\n      this.render(\"index\", {\n        into: \"application\",\n        model: model\n      });\n    }\n  });\n\n});","define('pincushion/services/store', ['exports', 'ember', 'pincushion/lib/identity-map'], function (exports, Ember, IdentityMap) {\n\n  'use strict';\n\n  var identityMap = IdentityMap['default'].create();\n\n  exports['default'] = Ember['default'].Object.extend({\n    find: function find(name, id) {\n\n      var cached = identityMap.get(name, id);\n      if (cached) {\n        return Ember['default'].RSVP.resolve(cached);\n      }\n\n      var adapter = this.container.lookup(\"adapter:\" + name);\n      return adapter.find(name, id).then(function (record) {\n        identityMap.set(name, id, record);\n        return record;\n      });\n    },\n\n    findAll: function findAll(name) {\n      var adapter = this.container.lookup(\"adapter:\" + name);\n      return adapter.findAll(name).then(function (records) {\n        identityMap.clear(name);\n        records.forEach(function (r) {\n          identityMap.set(name, r.id, r);\n        });\n\n        return identityMap.get(name);\n      });\n    },\n\n    findQuery: function findQuery(name, query) {\n      var adapter = this.container.lookup(\"adapter:\" + name);\n      return adapter.findQuery(name, query);\n    },\n\n    destroy: function destroy(name, record) {\n      var adapter = this.container.lookup(\"adapter:\" + name);\n      return adapter.destroy(name, record).then(function () {\n        identityMap.remove(name, record);\n      });\n    },\n\n    save: function save(name, record) {\n      var adapter = this.container.lookup(\"adapter:\" + name);\n      return adapter.save(name, record).then(function () {\n        identityMap.set(name, record.id, record);\n        return record;\n      });\n    }\n  });\n\n});","define('pincushion/templates/application', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"div\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"button\");\n        var el3 = dom.createTextNode(\"+\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, content = hooks.content, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0, 1]);\n        var morph0 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,2,3,contextualElement);\n        element(env, element0, context, \"action\", [\"showNewBookmark\"], {});\n        content(env, morph0, context, \"outlet\");\n        inline(env, morph1, context, \"outlet\", [\"newBookmark\"], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pincushion/templates/edit', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"form\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,0,1);\n        element(env, element0, context, \"action\", [\"saveBookmark\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"value\": get(env, context, \"model.url\"), \"placeholder\": \"URL\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pincushion/templates/index', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createElement(\"li\");\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n    \");\n          dom.appendChild(el1, el2);\n          var el2 = dom.createElement(\"button\");\n          var el3 = dom.createTextNode(\"X\");\n          dom.appendChild(el2, el3);\n          dom.appendChild(el1, el2);\n          var el2 = dom.createTextNode(\"\\n  \");\n          dom.appendChild(el1, el2);\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline, element = hooks.element;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var element0 = dom.childAt(fragment, [1]);\n          var element1 = dom.childAt(element0, [2]);\n          var morph0 = dom.createMorphAt(element0,0,1);\n          inline(env, morph0, context, \"link-to\", [get(env, context, \"bookmark.model.url\"), \"show\", get(env, context, \"bookmark\")], {});\n          element(env, element1, context, \"action\", [\"destroy\"], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createElement(\"ul\");\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(dom.childAt(fragment, [2]),0,-1);\n        content(env, morph0, context, \"bookmarksCount\");\n        block(env, morph1, context, \"each\", [get(env, context, \"model\")], {\"itemController\": \"bookmark\", \"keyword\": \"bookmark\"}, child0, null);\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pincushion/templates/new', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createElement(\"form\");\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createElement(\"h1\");\n        var el3 = dom.createTextNode(\"New Bookmark\");\n        dom.appendChild(el2, el3);\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n  \");\n        dom.appendChild(el1, el2);\n        var el2 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el1, el2);\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, element = hooks.element, get = hooks.get, inline = hooks.inline;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        var element0 = dom.childAt(fragment, [0]);\n        var morph0 = dom.createMorphAt(element0,2,3);\n        element(env, element0, context, \"action\", [\"createBookmark\"], {\"on\": \"submit\"});\n        inline(env, morph0, context, \"input\", [], {\"type\": \"text\", \"value\": get(env, context, \"model.url\"), \"placeholder\": \"URL\"});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pincushion/templates/show', ['exports'], function (exports) {\n\n  'use strict';\n\n  exports['default'] = Ember.HTMLBars.template((function() {\n    var child0 = (function() {\n      return {\n        isHTMLBars: true,\n        blockParams: 0,\n        cachedFragment: null,\n        hasRendered: false,\n        build: function build(dom) {\n          var el0 = dom.createDocumentFragment();\n          var el1 = dom.createTextNode(\"  \");\n          dom.appendChild(el0, el1);\n          var el1 = dom.createTextNode(\"\\n\");\n          dom.appendChild(el0, el1);\n          return el0;\n        },\n        render: function render(context, env, contextualElement) {\n          var dom = env.dom;\n          var hooks = env.hooks, get = hooks.get, inline = hooks.inline;\n          dom.detectNamespace(contextualElement);\n          var fragment;\n          if (env.useFragmentCache && dom.canClone) {\n            if (this.cachedFragment === null) {\n              fragment = this.build(dom);\n              if (this.hasRendered) {\n                this.cachedFragment = fragment;\n              } else {\n                this.hasRendered = true;\n              }\n            }\n            if (this.cachedFragment) {\n              fragment = dom.cloneNode(this.cachedFragment, true);\n            }\n          } else {\n            fragment = this.build(dom);\n          }\n          var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n          inline(env, morph0, context, \"link-to\", [get(env, context, \"tag\"), \"tags.show\", get(env, context, \"tag\")], {});\n          return fragment;\n        }\n      };\n    }());\n    return {\n      isHTMLBars: true,\n      blockParams: 0,\n      cachedFragment: null,\n      hasRendered: false,\n      build: function build(dom) {\n        var el0 = dom.createDocumentFragment();\n        var el1 = dom.createTextNode(\"\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        var el1 = dom.createTextNode(\"\\n\");\n        dom.appendChild(el0, el1);\n        return el0;\n      },\n      render: function render(context, env, contextualElement) {\n        var dom = env.dom;\n        var hooks = env.hooks, inline = hooks.inline, content = hooks.content, get = hooks.get, block = hooks.block;\n        dom.detectNamespace(contextualElement);\n        var fragment;\n        if (env.useFragmentCache && dom.canClone) {\n          if (this.cachedFragment === null) {\n            fragment = this.build(dom);\n            if (this.hasRendered) {\n              this.cachedFragment = fragment;\n            } else {\n              this.hasRendered = true;\n            }\n          }\n          if (this.cachedFragment) {\n            fragment = dom.cloneNode(this.cachedFragment, true);\n          }\n        } else {\n          fragment = this.build(dom);\n        }\n        if (this.cachedFragment) { dom.repairClonedNode(fragment,[0]); }\n        var morph0 = dom.createMorphAt(fragment,0,1,contextualElement);\n        var morph1 = dom.createMorphAt(fragment,1,2,contextualElement);\n        var morph2 = dom.createMorphAt(fragment,2,3,contextualElement);\n        var morph3 = dom.createMorphAt(fragment,3,4,contextualElement);\n        inline(env, morph0, context, \"link-to\", [\"Back\", \"index\"], {});\n        content(env, morph1, context, \"model.url\");\n        block(env, morph2, context, \"each\", [get(env, context, \"model.tags\")], {\"keyword\": \"tag\"}, child0, null);\n        inline(env, morph3, context, \"link-to\", [\"Edit\", \"edit\", get(env, context, \"model\")], {});\n        return fragment;\n      }\n    };\n  }()));\n\n});","define('pincushion/tests/adapters/bookmark.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - adapters');\n  test('adapters/bookmark.js should pass jshint', function() { \n    ok(true, 'adapters/bookmark.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('app.js should pass jshint', function() { \n    ok(true, 'app.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/controllers/bookmark.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/bookmark.js should pass jshint', function() { \n    ok(true, 'controllers/bookmark.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/controllers/edit.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/edit.js should pass jshint', function() { \n    ok(true, 'controllers/edit.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/controllers/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - controllers');\n  test('controllers/index.js should pass jshint', function() { \n    ok(true, 'controllers/index.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/helpers/resolver', ['exports', 'ember/resolver', 'pincushion/config/environment'], function (exports, Resolver, config) {\n\n  'use strict';\n\n  var resolver = Resolver['default'].create();\n\n  resolver.namespace = {\n    modulePrefix: config['default'].modulePrefix,\n    podModulePrefix: config['default'].podModulePrefix\n  };\n\n  exports['default'] = resolver;\n\n});","define('pincushion/tests/helpers/resolver.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/resolver.js should pass jshint', function() { \n    ok(true, 'helpers/resolver.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/helpers/start-app', ['exports', 'ember', 'pincushion/app', 'pincushion/router', 'pincushion/config/environment'], function (exports, Ember, Application, Router, config) {\n\n  'use strict';\n\n\n\n  exports['default'] = startApp;\n  function startApp(attrs) {\n    var application;\n\n    var attributes = Ember['default'].merge({}, config['default'].APP);\n    attributes = Ember['default'].merge(attributes, attrs); // use defaults, but you can override;\n\n    Ember['default'].run(function () {\n      application = Application['default'].create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n\n});","define('pincushion/tests/helpers/start-app.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - helpers');\n  test('helpers/start-app.js should pass jshint', function() { \n    ok(true, 'helpers/start-app.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/initializers/parse-tokens.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/parse-tokens.js should pass jshint', function() { \n    ok(true, 'initializers/parse-tokens.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/initializers/store-service.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - initializers');\n  test('initializers/store-service.js should pass jshint', function() { \n    ok(true, 'initializers/store-service.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/lib/identity-map.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - lib');\n  test('lib/identity-map.js should pass jshint', function() { \n    ok(true, 'lib/identity-map.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/router.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('router.js should pass jshint', function() { \n    ok(true, 'router.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/routes/application.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/application.js should pass jshint', function() { \n    ok(true, 'routes/application.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/routes/edit.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/edit.js should pass jshint', function() { \n    ok(true, 'routes/edit.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/routes/index.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/index.js should pass jshint', function() { \n    ok(true, 'routes/index.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/routes/new.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/new.js should pass jshint', function() { \n    ok(true, 'routes/new.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/routes/show.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes');\n  test('routes/show.js should pass jshint', function() { \n    ok(true, 'routes/show.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/routes/tags/show.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - routes/tags');\n  test('routes/tags/show.js should pass jshint', function() { \n    ok(true, 'routes/tags/show.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/services/store.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - services');\n  test('services/store.js should pass jshint', function() { \n    ok(true, 'services/store.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/test-helper', ['pincushion/tests/helpers/resolver', 'ember-qunit'], function (resolver, ember_qunit) {\n\n\t'use strict';\n\n\tember_qunit.setResolver(resolver['default']);\n\n});","define('pincushion/tests/test-helper.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - .');\n  test('test-helper.js should pass jshint', function() { \n    ok(true, 'test-helper.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/adapters/bookmark-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"adapter:bookmark\", \"BookmarkAdapter\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var adapter = this.subject();\n    assert.ok(adapter);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['serializer:foo']\n\n});","define('pincushion/tests/unit/adapters/bookmark-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/adapters');\n  test('unit/adapters/bookmark-test.js should pass jshint', function() { \n    ok(true, 'unit/adapters/bookmark-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/controllers/bookmark-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:bookmark\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/controllers/bookmark-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/bookmark-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/bookmark-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/controllers/edit-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:edit\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/controllers/edit-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/edit-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/edit-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/controllers/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"controller:index\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var controller = this.subject();\n    assert.ok(controller);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/controllers/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/controllers');\n  test('unit/controllers/index-test.js should pass jshint', function() { \n    ok(true, 'unit/controllers/index-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/initializers/parse-tokens-test', ['ember', 'pincushion/initializers/parse-tokens', 'qunit'], function (Ember, parse_tokens, qunit) {\n\n  'use strict';\n\n  var container, application;\n\n  qunit.module(\"ParseTokensInitializer\", {\n    beforeEach: function beforeEach() {\n      Ember['default'].run(function () {\n        application = Ember['default'].Application.create();\n        container = application.__container__;\n        application.deferReadiness();\n      });\n    }\n  });\n\n  // Replace this with your real tests.\n  qunit.test(\"it works\", function (assert) {\n    parse_tokens.initialize(container, application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n\n});","define('pincushion/tests/unit/initializers/parse-tokens-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/initializers');\n  test('unit/initializers/parse-tokens-test.js should pass jshint', function() { \n    ok(true, 'unit/initializers/parse-tokens-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/models/identity-map-test', ['ember-qunit', 'ember'], function (ember_qunit, Ember) {\n\n  'use strict';\n\n  var map;\n\n  ember_qunit.moduleFor(\"model:identity-map\", {\n    needs: []\n  });\n\n  ember_qunit.test(\"getting a non present id\", function (assert) {\n    assert.ok(!this.subject().get(\"type\", \"someid\"));\n  });\n\n  ember_qunit.test(\"getting a present id\", function (assert) {\n    var thing = {};\n    this.subject().set(\"type\", \"someid\", thing);\n    assert.ok(this.subject().get(\"type\", \"someid\"));\n  });\n\n  ember_qunit.test(\"getting an empty type is empty\", function (assert) {\n    var typeArray = this.subject().get(\"type\");\n    assert.ok(Ember['default'].isArray(typeArray));\n    assert.strictEqual(typeArray.length, 0);\n  });\n\n  ember_qunit.test(\"getting an non empty type is non empty\", function (assert) {\n    var typeArrayA = this.subject().get(\"type\");\n\n    var thing = {};\n    this.subject().set(\"type\", \"someid\", thing);\n\n    var typeArrayB = this.subject().get(\"type\");\n\n    assert.strictEqual(typeArrayA, typeArrayB);\n    assert.strictEqual(typeArrayA.get(\"firstObject\"), typeArrayB.get(\"firstObject\"));\n    assert.strictEqual(typeArrayA.length, 1);\n    assert.strictEqual(typeArrayB.length, 1);\n  });\n\n  ember_qunit.test(\"setting an id should update that id if it already exists\", function (assert) {\n    var thing = {};\n    this.subject().set(\"type\", \"someid\", thing);\n\n    var resultA = this.subject().get(\"type\", \"someid\");\n\n    var otherThing = { name: \"thing\" };\n    this.subject().set(\"type\", \"someid\", otherThing);\n\n    var resultB = this.subject().get(\"type\", \"someid\");\n\n    assert.strictEqual(resultA, resultB);\n    assert.strictEqual(resultA.get(\"name\"), \"thing\");\n  });\n\n  ember_qunit.test(\"create Ember.Object if not already\", function (assert) {\n    var thing = {};\n    this.subject().set(\"type\", \"someid\", thing);\n    assert.ok(this.subject().get(\"type\", \"someid\") instanceof Ember['default'].Object);\n\n    var object = Ember['default'].Object.create();\n    this.subject().set(\"type\", \"otherid\", object);\n    assert.strictEqual(this.subject().get(\"type\", \"otherid\"), object);\n  });\n\n  ember_qunit.test(\"removing a record\", function (assert) {\n    this.subject().set(\"type\", \"someid\", {});\n    var thing = this.subject().get(\"type\", \"someid\");\n    this.subject().remove(\"type\", thing);\n\n    assert.ok(!this.subject().get(\"type\", \"someid\"));\n\n    var typeArray = this.subject().get(\"type\");\n    assert.equal(typeArray.length, 0);\n  });\n\n  ember_qunit.test(\"removing an id\", function (assert) {\n    this.subject().set(\"type\", \"someid\", {});\n    var thing = this.subject().get(\"type\", \"someid\");\n    this.subject().remove(\"type\", \"someid\");\n\n    assert.ok(!this.subject().get(\"type\", \"someid\"));\n\n    var typeArray = this.subject().get(\"type\");\n    assert.equal(typeArray.length, 0);\n  });\n\n  ember_qunit.test(\"clearing a type\", function (assert) {\n    this.subject().set(\"type\", \"someid\", {});\n    var typeArray = this.subject().get(\"type\");\n\n    assert.equal(typeArray.length, 1);\n    this.subject().clear(\"type\");\n    assert.equal(typeArray.length, 0);\n  });\n\n});","define('pincushion/tests/unit/models/identity-map-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/models');\n  test('unit/models/identity-map-test.js should pass jshint', function() { \n    ok(true, 'unit/models/identity-map-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/routes/application-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:application\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/routes/application-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/application-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/application-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/routes/edit-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:edit\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/routes/edit-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/edit-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/edit-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/routes/index-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:index\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/routes/index-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/index-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/index-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/routes/new-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:new\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/routes/new-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/new-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/new-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/routes/show-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:show\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/routes/show-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes');\n  test('unit/routes/show-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/show-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/routes/tags/show-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"route:tags/show\", {});\n\n  ember_qunit.test(\"it exists\", function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['controller:foo']\n\n});","define('pincushion/tests/unit/routes/tags/show-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/routes/tags');\n  test('unit/routes/tags/show-test.js should pass jshint', function() { \n    ok(true, 'unit/routes/tags/show-test.js should pass jshint.'); \n  });\n\n});","define('pincushion/tests/unit/services/store-test', ['ember-qunit'], function (ember_qunit) {\n\n  'use strict';\n\n  ember_qunit.moduleFor(\"service:store\", {});\n\n  // Replace this with your real tests.\n  ember_qunit.test(\"it exists\", function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n\n  // Specify the other units that are required for this test.\n  // needs: ['service:foo']\n\n});","define('pincushion/tests/unit/services/store-test.jshint', function () {\n\n  'use strict';\n\n  module('JSHint - unit/services');\n  test('unit/services/store-test.js should pass jshint', function() { \n    ok(true, 'unit/services/store-test.js should pass jshint.'); \n  });\n\n});","/* jshint ignore:start */\n\n/* jshint ignore:end */\n","/* jshint ignore:start */\n\ndefine('pincushion/config/environment', ['ember'], function(Ember) {\n  var prefix = 'pincushion';\n/* jshint ignore:start */\n\ntry {\n  var metaName = prefix + '/config/environment';\n  var rawConfig = Ember['default'].$('meta[name=\"' + metaName + '\"]').attr('content');\n  var config = JSON.parse(unescape(rawConfig));\n\n  return { 'default': config };\n}\ncatch(err) {\n  throw new Error('Could not read config from meta tag with name \"' + metaName + '\".');\n}\n\n/* jshint ignore:end */\n\n});\n\nif (runningTests) {\n  require(\"pincushion/tests/test-helper\");\n} else {\n  require(\"pincushion/app\")[\"default\"].create({\"name\":\"pincushion\",\"version\":\"0.0.0.34aa63ca\"});\n}\n\n/* jshint ignore:end */\n"],"names":[],"mappings":"AAAA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;;ACLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrlxDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACRA;AACA;AACA;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;","file":"pincushion.js"}